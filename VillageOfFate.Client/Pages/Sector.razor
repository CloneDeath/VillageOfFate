@page "/world/sectors/{Id:guid}"
@using VillageOfFate.Client.Components
@using VillageOfFate.Client.Services.Api
@using VillageOfFate.WebModels
@inject SectorsApi SectorsApi
@inject NavigationManager NavigationManager
@inject ImageApi ImageApi

<PageTitle>Villager Detail</PageTitle>

@if (sector == null) {
    <p>
        <em>Loading...</em>
    </p>
} else {
    <h1>
        <button class="btn btn-primary" @onclick="GoBack">&lt;</button>
        @sector.Position
    </h1>

    <div class="d-flex">
        <img src="@ImageApi.GetImageUrl(sector.ImageId)" alt=""/>
        <p>@sector.Description</p>
    </div>

    <div class="accordion" id="accordionPanels">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#villagers" aria-expanded="true" aria-controls="villagers">
                    Villagers
                </button>
            </h2>
            <div id="villagers" class="accordion-collapse collapse show">
                <div class="accordion-body">
                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>

        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#items" aria-expanded="false" aria-controls="items">
                    Items
                </button>
            </h2>
            <div id="items" class="accordion-collapse collapse">
                <div class="item-container">
                    @if (sector.Items.Any()) {
                        @foreach (var item in sector.Items) {
                            <ItemComponent Item="@item"/>
                        }
                    } else {
                        <i>Empty</i>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private WebSector? sector;

    protected override async Task OnParametersSetAsync() {
        sector = await SectorsApi.GetSectorAsync(Id);
    }

    private void GoBack() {
        NavigationManager.NavigateTo("/world");
    }

}