@page "/villagers/{Id:guid}"
@using VillageOfFate.Client.Components
@using VillageOfFate.Client.Services.Api
@using VillageOfFate.WebModels
@inject VillagersApi VillagersService
@inject NavigationManager NavigationManager

<PageTitle>Villager Detail</PageTitle>

@if (villager == null) {
    <p>
        <em>Loading...</em>
    </p>
} else {
    <h1>
        <button class="btn btn-primary" @onclick="GoBack">&lt;</button>
        @villager.Name
    </h1>
    <p>Gender: @villager.Gender</p>
    <p>Age: @villager.Age</p>
    <p>Summary: @villager.Summary</p>
    <p>Hunger: @villager.Hunger</p>
    <p>Position: @villager.SectorLocation</p>
    <h3>Emotions</h3>
    <ul>
        @foreach (var emotionalState in villager.Emotions.GetEmotions()) {
            <li>@emotionalState.Emotion - @emotionalState.Intensity%</li>
        }
    </ul>
    <h3>Inventory</h3>
    @if (villager.Inventory.Any()) {
        @foreach (var item in villager.Inventory) {
            <ItemComponent Item="@item"/>
        }
    } else {
        <i>Empty</i>
    }

    <h3>Activities</h3>
    @if (villager.CurrentActivity == null) {
        <i>Idle</i>
    } else {
        <p>@villager.CurrentActivity.Description (@villager.CurrentActivity.Duration)</p>
    }

    <ul>
        @foreach (var activity in villager.ActivityQueue) {
            <li>@activity.Description (@activity.Duration)</li>
        }
    </ul>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private WebVillager? villager;

    protected override async Task OnParametersSetAsync() {
        villager = await VillagersService.GetVillager(Id);
    }

    private void GoBack() {
        NavigationManager.NavigateTo("/villagers");
    }

}