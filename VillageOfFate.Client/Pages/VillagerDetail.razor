@page "/villagers/{Id:guid}"
@using VillageOfFate.Client.Components
@using VillageOfFate.Client.Services.Api
@using VillageOfFate.WebModels
@inject VillagersApi VillagersService
@inject SectorsApi SectorsApi
@inject ImageApi ImageApi

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        @if (!SectorId.HasValue) {
            <li class="breadcrumb-item">
                <a href="/villagers">Villagers</a>
            </li>
        } else {
            <li class="breadcrumb-item">
                <a href="/world">World</a>
            </li>
            <li class="breadcrumb-item">
                <a href="/world/sectors/@SectorId">Sector @sector?.Position</a>
            </li>
        }
        <li class="breadcrumb-item active" aria-current="page">@(villager?.Name ?? "Villager")</li>
    </ol>
</nav>

@if (villager == null) {
    <title>Villager</title>
    <p>
        <em>Loading...</em>
    </p>
} else {
    <title>@villager.Name</title>

    <div class="profile">
        <img src="@ImageApi.GetImageUrl(villager.ImageId)" alt=""/>

        <div>
            <p>Gender: @villager.Gender</p>
            <p>Age: @villager.Age</p>
            <p>Summary: @villager.Summary</p>
            <p>Hunger: @villager.Hunger</p>
            <p>Position: @villager.SectorLocation</p>
        </div>
    </div>

    <h3>Emotions</h3>
    <ul>
        @foreach (var emotionalState in villager.Emotions.GetEmotions()) {
            <li>@emotionalState.Emotion - @emotionalState.Intensity%</li>
        }
    </ul>
    <h3>Inventory</h3>
    @if (villager.Inventory.Any()) {
        @foreach (var item in villager.Inventory) {
            <ItemComponent Item="@item"/>
        }
    } else {
        <i>Empty</i>
    }

    <h3>Activities</h3>
    @if (villager.CurrentActivity == null) {
        <i>Idle</i>
    } else {
        <div>
            <ActivityComponent Activity="@villager.CurrentActivity"/>
        </div>
    }

    @foreach (var activity in villager.ActivityQueue) {
        <div class="indent">
            <ActivityComponent Activity="@activity"/>
        </div>
    }
}

@code {
    [Parameter] public Guid Id { get; set; }

    [SupplyParameterFromQuery(Name = "sectorId")]
    [Parameter]
    public Guid? SectorId { get; set; }

    private WebVillager? villager;
    private WebSector? sector;

    protected override async Task OnParametersSetAsync() {
        villager = await VillagersService.GetVillager(Id);
        if (SectorId.HasValue) {
            sector = await SectorsApi.GetSectorAsync(SectorId.Value);
        }
    }
}